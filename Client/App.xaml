<Application x:Class="Client.App"
             
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:system="clr-namespace:System;assembly=mscorlib"
             xmlns:local="clr-namespace:Client"
             xmlns:converters="clr-namespace:Client.Converters"
             xmlns:viewmodels="clr-namespace:Client.ViewModels"
             xmlns:views="clr-namespace:Client.Views"
             DispatcherUnhandledException="Application_DispatcherUnhandledException"
             Startup="Start"
             >

    <Application.Resources>

        <Style TargetType="Border">
            <Setter Property="Background" Value="#0F1E2E"/>
        </Style>
        <Style TargetType="TextBlock">
            <Setter Property="Foreground" Value="#DADDE7"/>
        </Style>
        <Style TargetType="TextBox">
            <Setter Property="Background" Value="#28507B"/>
            <Setter Property="BorderBrush" Value="#28507B"/>
            <Setter Property="Foreground"  Value="#DADDE7"/>
        </Style>
        <Style TargetType="PasswordBox">
            <Setter Property="Background" Value="#28507B"/>
            <Setter Property="BorderBrush" Value="#28507B"/>
            <Setter Property="Foreground"  Value="#DADDE7"/>
        </Style>
        <Style TargetType="ListBox">
            <Setter Property="Background" Value="#2F4475"/>
            <Setter Property="BorderBrush" Value="#2F4475"/>
        </Style>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#3a5591"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#3a5591"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#4767b2"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#4767b2"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#4767b2"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#4767b2"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#2F4475"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#2F4475"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#747ea4"/>
        <Style TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="Foreground" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <DataTemplate DataType="{x:Type viewmodels:MainViewModel}">
            <local:MainWindow/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type viewmodels:LoginViewModel}">
            <views:LoginView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type viewmodels:RegisterViewModel}">
            <views:RegisterView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type viewmodels:ChatViewModel}">
            <views:ChatView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type viewmodels:UserKeyOutputViewModel}">
            <views:UserKeyOutputView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type viewmodels:UserKeyInputViewModel}">
            <views:UserKeyInputView/>
        </DataTemplate>

        <converters:StringToIntConverter x:Key="stringToIntConverter"/>
        <converters:BoolToColorConverter x:Key="boolToColorConverter"/>
        <converters:BoolToVisibilityConverter x:Key="boolToVisibilityConverter"/>
        <converters:IntToVisibilityConverter x:Key="intToVisibilityConverter"/>
        <converters:BoolToIntConverter x:Key="boolToIntConverter"/>
        <converters:BoolToSideConverter x:Key="boolToSideConverter"/>
        <converters:DateTimeToDateStringConverter x:Key="dateTimeToDateStringConverter"/>
        <converters:DateTimeToTimeStringConverter x:Key="dateTimeToTimeStringConverter"/>
        
    </Application.Resources>
    
</Application>
